#ifndef SNAKE_H
#define SNAKE_H

#include <iostream>
#include "Score.h"
#include <vector>
#include <ncurses.h>
#include <unistd.h>
#include <time.h>

class Snake {
public:
    int set_x, set_y;
    int min_len = 3;
    int max_len = 12;
    int direction;
    std::vector<std::pair<int, int>> body;
    int item_pos[3][4] = {0}; // 아이템 포지션 배열 크기 수정
    int item_n = 0;
    int itemType = 0;
    char item_shape[3] = {'5', '6', '8'}; // 새로운 아이템 타입 추가
    int h, w;
    int gate[2][2]; // 게이트 위치 저장
    time_t gate_time; // 게이트 생성 시간 기록
    time_t last_item_time[3]; // 아이템별 마지막 생성 시간
    const double item_spawn_interval[3] = {3.0, 3.0, 15.0}; // 아이템별 생성 간격
    const double item_duration = 5.0; // 아이템 지속 시간
    char map[4][21][45] = {
        {
            "999999999999999999999999999999999999999999",
            "911111111111111111111111111111111111111199",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "911111111111111111111111111111111111111199",
            "999999999999999999999999999999999999999999"
        },
        {
            "999999999999999999999999999999999999999999",
            "911111111111111111111111111111111111111199",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000111110000000000000000000019",
            "910000000000000111110000000000000000000019",
            "910000000000000111110000000000000000000019",
            "910000000000000111110000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "911111111111111111111111111111111111111199",
            "999999999999999999999999999999999999999999"
        },
        {
            "999999999999999999999999999999999999999999",
            "911111111111111111111111111111111111111199",
            "910000000000000000000000000000000000000019",
            "910000111111111111111100000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000100000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "911111111111111111111111111111111111111199",
            "999999999999999999999999999999999999999999"
        },
        {
            "999999999999999999999999999999999999999999",
            "911111111111111111111111111111111111111199",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000111111111111110000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000000000000000100000000000000000019",
            "910000000111111111111110000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "910000000000000000000000000000000000000019",
            "911111111111111111111111111111111111111199",
            "999999999999999999999999999999999999999999"
        }
    };
    Snake(int x, int y, int height, int width);
    bool Game(WINDOW* s1, Score& b, int map_number);
    void Move(int direction);
    bool Collision(int& growth, int& poison, int map_number);
    void SpawnItem(int map_number, int item_type);
    void DelItem(int map_number);
    void GenerateGate(int map_number);
    void DelGate(int map_number);
    void Show(WINDOW* s1, int map_num);
    char MapChar(int map_num, int y, int x);
    bool UnableItem(int map_number, int p1, int p2); // 아이템이 생성 가능한 지 확인.
};

#endif // SNAKE_H