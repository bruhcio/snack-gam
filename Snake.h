#ifndef SNAKE_H
#define SNAKE_H

#include <iostream>
#include "Score.h"
#include <vector>
#include <ncurses.h>
#include <unistd.h>
#include <time.h>

class YJHSnake {
public:
    int yjh_x, yjh_y; // 시작 위치
    int yjh_minlen = 3; // 최소 길이
    int yjh_maxlen = 12; // 최대 길이
    int yjh_dir; // 방향 - 어디로 갈지
    std::vector<std::pair<int, int>> yjh_body; // 몸통 위치
    int yjh_itempos[3][4] = {0}; // 아이템 위치 배열 크기 수정
    int yjh_itemnum = 0;
    int yjh_itemtype = 0;
    char yjh_itemshape[3] = {'5', '6', '8'}; // 새로운 아이템 타입 추가
    int yjh_height, yjh_width; // 높이, 너비
    int yjh_gatepos[2][2]; // 게이트 위치 저장
    time_t yjh_gatetime; // 게이트 생성 시간 기록
    time_t yjh_lastitemtime[3]; // 아이템별 마지막 생성 시간
    const double yjh_itemspawnint[3] = {3.0, 3.0, 15.0}; // 아이템별 생성 간격
    const double yjh_itemdur = 5.0; // 아이템 지속 시간
    char yjh_map[4][21][45] = {
        {
            "911111111111111111111111111111111111111119",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "911111111111111111111111111111111111111119"
        },
        {
            "911111111111111111111111111111111111111119",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000111110000000000000000000001",
            "100000000000000111110000000000000000000001",
            "100000000000000111110000000000000000000001",
            "100000000000000111110000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "911111111111111111111111111111111111111119"
        },
        {
            "911111111111111111111111111111111111111119",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000011111111111111110000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000010000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "911111111111111111111111111111111111111119"
        },
        {
            "911111111111111111111111111111111111111119",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000111111111111110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000000000000000110000000000000000001",
            "100000000111111111111110000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "100000000000000000000000000000000000000001",
            "911111111111111111111111111111111111111119"
        }
    };

    YJHSnake(int x, int y, int height, int width);
    bool Game(WINDOW* window, YJHScore& score, int map_number);
    void Move(int direction);
    bool CheckCollision(int& growth, int& poison, int map_number, int& gate_uses, int& big_growth); // 수정된 함수 선언
    void SpawnItem(int map_number, int item_type);
    void RemoveItem(int map_number);
    void CreateGate(int map_number);
    void RemoveGate(int map_number);
    void Display(WINDOW* window, int map_number);
    char GetMapChar(int map_number, int y, int x);
    bool IsValidItemPosition(int map_number, int y, int x); // 아이템이 생성 가능한지 확인
};

#endif // SNAKE_H